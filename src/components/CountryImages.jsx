import { useState, useEffect } from "react";
import axios from "axios";

const CountryImages = ({ country }) => {
  const [images, setImages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const googleApiKey = import.meta.env.VITE_GOOGLE_API_KEY;
  const cx = import.meta.env.VITE_CX_ID;

  useEffect(() => {
    if (country) {
      const fetchImages = async () => {
        setLoading(true);
        setImages([]);
        setError(null);

        try {
          const query = `"${country}" ("beautiful landscape" OR "natural scenery" OR "breathtaking view") 
-site:shutterstock.com -source:shutterstock.com 
-site:istockphoto.com -source:istockphoto.com 
-site:windsorstore.com -source:windsorstore.com 
-site:adobestock.com -source:adobestock.com 
-site:media.gettyimages.com -source:media.gettyimages.com 
-site:gettyimages.com -source:gettyimages.com 
-site:bigstockphoto.com -source:bigstockphoto.com 
-site:depositphotos.com -source:depositphotos.com 
-site:123rf.com -source:123rf.com 
-site:dreamstime.com -source:dreamstime.com 
-site:alamy.com -source:alamy.com 
-site:fotolia.com -source:fotolia.com 
-site:etsy.com -source:etsy.com 
-site:i.etsystatic.com -source:i.etsystatic.com 
-site:royalcaribbean.com -source:royalcaribbean.com 
-site:envato.com -source:envato.com 
-site:pinterest.com -source:pinterest.com 
-site:flickr.com -source:flickr.com 
-site:picxy.com
-site:cbx-prod.b-cdn.net
-site:canva.com -source:canva.com 
-site:redbubble.com -source:redbubble.com 
-site:deviantart.com -source:deviantart.com 
-site:freepik.com -source:freepik.com 
-site:pixtastock.com -source:pixtastock.com
-inurl:santorini.jpg -inurl:5044557431 -inurl:il_570xN 
-watermark -AI -generated -artificial -DALL·E -MidJourney -stock 
-small -lowres -generic -excessivebranding -meme -quote -text -typography 
-infographic -poster -CGI -render -prompt -fantasy -conceptart 
-"©" -"watermarked" -"stock photo" -"rights managed" -"licensed image" -"getty" -"shutterstock" -"istock" -"depositphotos" -"dreamstime" -"alamy" -"bigstock" -"123rf" -"fotolia" -"adobe stock" 
-"digital art" -"computer generated" -"artificial intelligence" -"rendered image" -"robot" -"generated by AI" -"created by AI" -"AI-generated" -"AI artwork" -"AI art" -"machine learning" -"deep learning" 
-"AI image" -"AI generated image" -"AI art" -"AI drawing" -"AI generated art" -"AI rendering" -"AI creation" -"artificial generation" -"machine-generated" -"synthetic image" -"rendered by AI" -"AI bot" -"machine generated"
-"neural network" -"neural net" -"deep fake" -"generated art" -"virtual art" -"AI artwork" -"artificially created" -"virtual reality" -"machine generated image" -"computer-generated art" -"AI made" -"AI painting" -"deepfake image" -"synthetic media" -"AI rendering art" -"virtual image" -"synthetic art" -"AI-generated painting" -"AI illustration"
-"bad quality" -"low quality" -"blurry" -"distorted" -"banner" -"headline" -"corporate" -"business" -"portrait" -"mugshot" -"studio shot" -"isolated" -"GIF" -"jpeg" -"JPEG"
-"branding" -"logo" -"brand" -"advertisement" -"marketing" 
-"headshot" -"model" -"businessperson" -"advertisement photo" -"conference" -"meeting"
-"product photo" -"store" -"shopping" -"retail" -"consumer"
-"abstract" -"artistic" -"stylized" -"pattern" -"vector" -"texture"
-"pet product" -"dog food" -"cat product" -"pet store" -"pet ad"
-"photoshop" -"3d render" -"virtual landscape" -"digital landscape" -"3D nature"
-"screen" -"laptop" -"tablet" -"smartphone" -"computer" -"keyboard" -"gadget" -"wireframe" -"technology"
-"tiny" -"pixelated" -"blurry" -"low quality" 
-"fantasy landscape" -"surreal" -"dreamscape" -"illusion" -"magic"
-"generic" -"stock image" -"template" -"public domain" -"common image" -"standard"
-"studio shot" -"clothing" -"fashion shoot" -"model in studio" -"background studio"
-"product shot" -"product placement" -"commercial" -"advertisement image" -"promotional image" -"product display" -"retail product" -"consumer product"
-"person" -"people" -"portrait" -"group photo" -"headshot" -"facial" -"face"
-"car" -"vehicle" -"building" -"street" -"traffic" -"architecture" -"cityscape" -"shopping" -"advertisement" -"sign" -"billboard" -"storefront"
-"vector" -"illustration" -"drawing" -"digital painting" -"cartoon" -"clip art" -"artistic rendering"
-"abstract art" -"psychedelic" -"artistic abstract" -"visual art" -"colorful abstract" -"artistic pattern" -"distorted art" -"conceptual art"
-"stock illustration" -"stock vector" -"free stock image" -"free stock photo" -"stock photo"
-"filter" -"saturation" -"vignette" -"overexposed" -"glow effect" -"lens flare" -"HDR"
-"digital manipulation" -"Photoshop" -"photo manipulation" -"artificial lighting" -"unrealistic lighting" -"CGI effect" -"rendered effect" -"photorealistic" -"photo-realistic"
-"old photo" -"vintage" -"retro" -"grainy" -"pixelated" -"low resolution" -"poor quality" -"blurry"
-"event" -"festival" -"concert" -"celebration" -"parade" -"sports event" -"crowd" -"tourist destination" -"landmark" -"holiday"
-"people" -"buildings" -"construction" -"crowds" -"tourist" -"boats" -"vehicles" -"street furniture" -"street signs" -"roads"
-"minimalist" -"monochrome" -"black and white" -"grayscale" -"low contrast" -"simple" -"plain background"`;

          const randomStart = Math.random() > 0.5 ? 1 : 6; // Soit résultats 1-10, soit 6-15
          const url = `https://www.googleapis.com/customsearch/v1?q=${encodeURIComponent(query)}&cx=${cx}&key=${googleApiKey}&searchType=image&num=10&imgSize=large&imgType=photo&start=${randomStart}`;

          const response = await axios.get(url);
          let imageResults = response.data.items || [];

          if (imageResults.length === 0) {
            setError("Aucune image trouvée.");
            return;
          }

          // Enlever les images en double (parfois, Google renvoie plusieurs fois la même)
          const uniqueImages = Array.from(
            new Set(imageResults.map((img) => img.link))
          ).map((link) => imageResults.find((img) => img.link === link));

          // Mélanger et prendre 3 images aléatoires
          const selectedImages = uniqueImages
            .sort(() => Math.random() - 0.5)
            .slice(0, 3);

          setImages(selectedImages);
        } catch (err) {
          setError("Nombre de requêtes dépassé ou erreur API.");
        } finally {
          setLoading(false);
        }
      };

      fetchImages();
    }
  }, [country]);

  if (loading) return <div>Loading images...</div>;
  if (error) return <div>{error}</div>;

  return (
    <div className="text-white">
      <h2>Images of {country}</h2>
      {images.length > 0 ? (
        <div className="flex justify-center gap-5 flex-wrap">
          {images.map((image, index) => (
            <img
              key={index}
              src={image.link}
              alt={`Image ${index}`}
              className="w-[800px] h-[600px] object-cover rounded-lg shadow-lg"
            />
          ))}
        </div>
      ) : (
        <div>No images found.</div>
      )}

      {country && (
        <div className="m-8 flex flex-col items-center">
          <h2>More about {country}</h2>
          <div className="flex justify-center">
            <iframe
              src={`https://en.wikipedia.org/wiki/${encodeURIComponent(country)}`}
              className="w-[800px] h-[600px] border rounded-lg shadow-lg"
              title={`Wikipedia page of ${country}`}
            ></iframe>
          </div>
        </div>
      )}
    </div>
  );
};

export default CountryImages;
